工作区（Working Directory）就是你在电脑里能看到的目录，比如learngit文件夹就是一个工作区。

版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是被称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

Git仓库的初始化命令：git init

添加文件到Git仓库，分两步：
    第一步，使用命令git add <file>，可反复多次使用，添加多个文件；（实际上就是把文件修改添加到暂存区）
    第二步，使用命令git commit，完成。最好是用-m说明一下这次提交的改动（实际上就是把暂存区的所有内容提交到当前分支。）
    注意：在第一次使用git commit之前要给出user.email和user.name, to set your account's default identity.，命令是:
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
Omit --global to set the identity only in this repository.

命令git status可以随时掌握工作区的状态

命令git diff <file>可以查看文本文件修改的内容

命令git log可以查看提交历史，以便确定要回退到哪个版本。
加上参数--pretty=oneline可以查看简要信息

HEAD指针指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100，用命令：git reset --hard HEAD^ 可以回到上一个版本

只要知道未来某个版本的版本号就可以重返未来，之前的信息找不到版本号的话，可以用git reflog查看命令历史，以便确定要回到未来的哪个版本。

问题1：如果我一次性提交了多个新文件，但是想要回退其中一个文件。可是似乎前面的版本回退是把整个库里的所有文件都给回退了，我觉得这样不好，能不能只指定回退其中一个文件呢？

为什么Git比其他版本控制系统设计得优秀，是因为Git跟踪并管理的是修改，而非文件。

git diff <file>：是查看working tree与index file的差别的(当stage为空时，则是查看working tree与最新commit的差别）
git diff --cached <file>：是查看index file与最新commit的差别的
git diff HEAD -- <file>：是查看working tree和最新commit的差别的（中间的两个小横杠可以去掉）

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
1. 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
2. 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- <file>命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

Git同样告诉我们，用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区,然后用git checkout -- <file>命令撤销工作区的修改。git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

命令git rm <file>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。因为删除也算是修改，所以可以用git checkout -- <file>恢复（其实就是把最新版本中的<file>恢复到工作区）
如果确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit

SSH连接的设置详见廖雪峰老师的Git教程

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git（add后面的参数是远程库的名字，这里的名字就是origin，沿用于下面的git push）
关联后，使用命令git push -u origin master第一次推送master分支的所有内容（由于远程库是空的，我们第一次推送master分支时，加上了-u参数）
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。例如：
git clone git@github.com:github_account/repo_name.git

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并<name>分支到当前分支：git merge <name>
删除分支：git branch -d <name>

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。（加上参数--pretty=oneline就只显示一行，参数--abbrev-commit就只显示commit_id的前几位）

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
如果强制禁用Fast forward模式，Git就会在merge时生成一个新的commit（所以可以在--no-ff后面加上-m说明信息），这样，从分支历史上就可以看出分支信息。

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，转到工作分支，一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了。你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash。

我的理解：在一个分支dev1中做了某些修改但是还没有add和commit，此时转到另一个分支dev2时会看做仅仅是工作区的修改（简单情况下，设这两个分支的最新commit都相同），这时候先在dev1中做修改后转到dev2和先转到dev2在做修改是一样的效果。都只是工作区的修改而已。如果修改被add或是commit了，则在转到另一个分支dev2时若是被察觉到和dev2的最新commit不同，则工作区的内容会被替换成dev2的最新commit中的内容。

我的理解：在两个分支上分别对同一个文件做修改并提交后，如果修改的是明显不同的两个地方，合并这两个分支时不会冲突，而是接纳两处更改。

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作的工作模式通常是这样：
    首先，可以试图用git push origin branch-name推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。



    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；可以用git show <tagname>查看标签信息
    git tag -a <tagname> -m "blablabla..."可以指定标签说明；
    git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
    命令git tag可以查看所有标签。
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。



    在GitHub上，可以任意Fork开源仓库；
    自己拥有Fork后的仓库的读写权限；
    可以推送pull request给官方仓库来贡献代码。

    忽略某些文件时，需要编写.gitignore；
    .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

颜色配置：
$ git config --global color.ui true
别名配置
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。每个仓库的Git配置文件都放在.git/config文件中。别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中，配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。

    搭建Git服务器非常简单，通常10分钟即可完成；
    要方便管理公钥，用Gitosis；
    要像SVN那样变态地控制权限，用Gitolite。
