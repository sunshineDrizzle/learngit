工作区（Working Directory）就是你在电脑里能看到的目录，比如learngit文件夹就是一个工作区。

版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

Git仓库的初始化命令：git init

添加文件到Git仓库，分两步：
    第一步，使用命令git add <file>，可反复多次使用，添加多个文件；（实际上就是把文件修改添加到暂存区）
    第二步，使用命令git commit，完成。最好是用-m说明一下这次提交的改动（实际上就是把暂存区的所有内容提交到当前分支。）
    注意：在第一次使用git commit之前要给出user.email和user.name, to set your account's default identity.，命令是:
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
Omit --global to set the identity only in this repository.

命令git status可以随时掌握工作区的状态

命令git diff <file>可以查看文本文件修改的内容

命令git log可以查看提交历史，以便确定要回退到哪个版本。
加上参数--pretty=oneline可以查看简要信息

HEAD指针指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100，用命令：git reset --hard HEAD^ 可以回到上一个版本

只要知道未来某个版本的版本号就可以重返未来，之前的信息找不到版本号的话，可以用git reflog查看命令历史，以便确定要回到未来的哪个版本。

问题1：如果我一次性提交了多个新文件，但是想要回退其中一个文件。可是似乎前面的版本回退是把整个库里的所有文件都给回退了，我觉得这样不好，能不能只指定回退其中一个文件呢？

为什么Git比其他版本控制系统设计得优秀，是因为Git跟踪并管理的是修改，而非文件。

git diff <file>：是查看working tree与index file的差别的(当stage为空时，则是查看working tree与最新commit的差别）
git diff --cached <file>：是查看index file与最新commit的差别的
git diff HEAD -- <file>：是查看working tree和最新commit的差别的（中间的两个小横杠可以去掉）

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
1. 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
2. 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- <file>命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

Git同样告诉我们，用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区,然后用git checkout -- <file>命令撤销工作区的修改。git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
